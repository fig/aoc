#!/usr/bin/env ruby

require 'aoc'
require 'thor'
require 'date'

class CLI < Thor
  desc "fetch [day] [year]", "fetch and display a challenge description. If no day and year, use today's date."
  method_option :input, :aliases => "-i", :type => :boolean, :default => false, :desc => "only show the input of the challenge."
  def fetch(day = Date.today.day, year = Date.today.year)
    challenge = Aoc::Challenge.new(day, year)

    begin
      return puts challenge.input if options[:input]
    rescue OpenURI::HTTPError
      return puts "Cannot find the input for your challenge. Make sure your session key is valid."
    end

    begin
      puts "Fetching: day #{day}, #{year}"
      puts challenge.part1
      puts ""
      puts challenge.part2 if challenge.part2?
    rescue OpenURI::HTTPError
      puts "Cannot find this challenge, make sure it exists."
    end
  end

  desc "bootstrap [day] [year]", "bootstrap a challenge."
  def bootstrap(day = Date.today.day, year = Date.today.year)
    challenge = Aoc::Challenge.new(day, year)
    puts "Bootstrapping: day #{day}, #{year}"

    begin
      dir = "day#{day}"
      readme = File.join(dir, "README")
      input = File.join(dir, "input.txt")
      solution = File.join(dir, "solution.rb")

      Dir.mkdir(dir) unless File.directory?(dir)

      File.open(readme, "w") do |file|
        file << challenge.part1
        file << "\n"
        file << challenge.part2 if challenge.part2?
      end

      unless File.exist?(input)
        File.write(input, challenge.input)
      end

      unless File.exist?(solution)
        File.open(solution, "w") do |file|
          file << Aoc::Templates.solution_file_template
        end
      end
    rescue OpenURI::HTTPError
      puts "Cannot find this challenge, make sure it exists."
    end
  end

  desc "submit [answer] [day] [year]", "Submit an answer to a challenge."
  def submit(answer, day = Date.today.day, year = Date.today.year)
    challenge = Aoc::Challenge.new(day, year)
    puts challenge.submit(answer)
  end
end

CLI.start
